package com.example.xmlbuilder;

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;
import java.util.Locale;
import java.util.Properties;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.OutputKeys;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerConfigurationException;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;

import org.w3c.dom.Document;
import org.w3c.dom.Element;

import android.os.Bundle;
import android.os.Environment;
import android.support.v4.app.Fragment;
import android.support.v4.app.FragmentActivity;
import android.support.v4.app.FragmentManager;
import android.support.v4.app.FragmentPagerAdapter;
import android.support.v4.view.ViewPager;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.Menu;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ArrayAdapter;
import android.widget.TextView;

public class MainActivity extends FragmentActivity {

    /**
     * The {@link android.support.v4.view.PagerAdapter} that will provide
     * fragments for each of the sections. We use a
     * {@link android.support.v4.app.FragmentPagerAdapter} derivative, which
     * will keep every loaded fragment in memory. If this becomes too memory
     * intensive, it may be best to switch to a
     * {@link android.support.v4.app.FragmentStatePagerAdapter}.
     */
    SectionsPagerAdapter mSectionsPagerAdapter;

    /**
     * The {@link ViewPager} that will host the section contents.
     */
    ViewPager mViewPager;
    
    private Document document;
    private Element actualElement;
    private SimpleDateFormat sdf = new SimpleDateFormat("MM/dd/yyyy HH:mm:ss");

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        // Create the adapter that will return a fragment for each of the three
        // primary sections of the app.
        mSectionsPagerAdapter = new SectionsPagerAdapter(getSupportFragmentManager());

        // Set up the ViewPager with the sections adapter.
        mViewPager = (ViewPager) findViewById(R.id.pager);
        mViewPager.setAdapter(mSectionsPagerAdapter);
        
        File dir = new File(Environment.getExternalStorageDirectory().getAbsolutePath());
		File xmlfile = new File(dir+"/0/",File.separator + "test.xml");	
		Thread xmlTread = new Thread(new XMLFileTreeCreator(xmlfile));
		xmlTread.start();
		
//		if(xmlfile.exists()){
//			xmlfile.delete();
//		}
//		
//		try {
//	        DocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory.newInstance();
//	            DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();
//	            document = documentBuilder.newDocument();
//
//	            String[] rootDirParts = Environment.getExternalStorageDirectory().getAbsolutePath().split("/");
//	            Element rootElement = document.createElement(rootDirParts[rootDirParts.length-1]);
//	            rootElement.setAttribute("type", "d");
//	            document.appendChild(rootElement);
//	            
//	            showDirs(new File(Environment.getExternalStorageDirectory().getAbsolutePath()), rootElement);
//
//	            TransformerFactory factory = TransformerFactory.newInstance();
//	            Transformer transformer = factory.newTransformer();
//	            Properties outFormat = new Properties();
//	            outFormat.setProperty(OutputKeys.INDENT, "yes");
//	            outFormat.setProperty(OutputKeys.METHOD, "xml");
//	            outFormat.setProperty(OutputKeys.OMIT_XML_DECLARATION, "no");
//	            outFormat.setProperty(OutputKeys.VERSION, "1.0");
//	            outFormat.setProperty(OutputKeys.ENCODING, "UTF-8");
//	            transformer.setOutputProperties(outFormat);
//	            DOMSource domSource = 
//	            new DOMSource(document.getDocumentElement());
//	            OutputStream output = new ByteArrayOutputStream();
//	            StreamResult result = new StreamResult(output);
//	            transformer.transform(domSource, result);
//	            String xmlString = output.toString();
//	            
//	            FileWriter writer = new FileWriter(xmlfile,true);
//				writer.write(xmlString);
//				writer.flush();
//				writer.close();
//	            
//	        } catch (ParserConfigurationException e) {
//	        } catch (TransformerConfigurationException e) {
//	        } catch (TransformerException e) {
//	        } catch (IOException e) {
//				e.printStackTrace();
//			}
    }
    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        // Inflate the menu; this adds items to the action bar if it is present.
        getMenuInflater().inflate(R.menu.main, menu);
        return true;
    }
    
    

    /**
     * A {@link FragmentPagerAdapter} that returns a fragment corresponding to
     * one of the sections/tabs/pages.
     */
    public class SectionsPagerAdapter extends FragmentPagerAdapter {

        public SectionsPagerAdapter(FragmentManager fm) {
            super(fm);
        }

        @Override
        public Fragment getItem(int position) {
            // getItem is called to instantiate the fragment for the given page.
            // Return a DummySectionFragment (defined as a static inner class
            // below) with the page number as its lone argument.
            Fragment fragment = new DummySectionFragment();
            Bundle args = new Bundle();
            args.putInt(DummySectionFragment.ARG_SECTION_NUMBER, position + 1);
            fragment.setArguments(args);
            return fragment;
        }

        @Override
        public int getCount() {
            // Show 3 total pages.
            return 3;
        }

        @Override
        public CharSequence getPageTitle(int position) {
            Locale l = Locale.getDefault();
            switch (position) {
                case 0:
                    return getString(R.string.title_section1).toUpperCase(l);
                case 1:
                    return getString(R.string.title_section2).toUpperCase(l);
                case 2:
                    return getString(R.string.title_section3).toUpperCase(l);
            }
            return null;
        }
    }

    /**
     * A dummy fragment representing a section of the app, but that simply
     * displays dummy text.
     */
    public static class DummySectionFragment extends Fragment {
        /**
         * The fragment argument representing the section number for this
         * fragment.
         */
        public static final String ARG_SECTION_NUMBER = "section_number";

        public DummySectionFragment() {
        }

        @Override
        public View onCreateView(LayoutInflater inflater, ViewGroup container,
        		Bundle savedInstanceState) {
            View rootView = inflater.inflate(R.layout.fragment_main_dummy, container, false);
            TextView dummyTextView = (TextView) rootView.findViewById(R.id.section_label);
            dummyTextView.setText(Integer.toString(getArguments().getInt(ARG_SECTION_NUMBER)));
            return rootView;
        }
    }
    private void showDirs(File dir, Element above){
    	if(dir.listFiles()!=null){
	        for(File f:dir.listFiles()){
	            if(f.isDirectory()){
	            	actualElement=document.createElement("d");
	            	actualElement.setAttribute("name", f.getName());
	            	actualElement.setAttribute("size", ""+f.length());
	            	actualElement.setAttribute("date", sdf.format(f.lastModified()));
	            	above.appendChild(actualElement);
	                showDirs(f, actualElement);
	            }
	            else{
	            	actualElement=document.createElement("f");
	            	actualElement.setAttribute("name", f.getName());
	            	actualElement.setAttribute("size", ""+f.length());
	            	actualElement.setAttribute("date", sdf.format(f.lastModified()));
	            	above.appendChild(actualElement);
	            }
	        }
    	}
    }
}
